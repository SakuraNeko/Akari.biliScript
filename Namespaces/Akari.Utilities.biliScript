// {{Depend : Akari}} //

/* Namespace: Akari.Utilities
 * Provide utilities not directly related to presenting content.
 */
Akari.Utilities = {};

/* Static Class: Factory
 * Provides functions for creating and manipulating objects.
 * Legacy name used because this was once an actual factory. (See: 2012/11/21 Update)
 */
Akari.Utilities.Factory =
{
  /* Function: collapse
   * Concats all arrays given into one.
   *
   * arrays
   *   An Array of Arrays.
   */
  collapse : function( arrays )
  {
    var result = [];
    
    for ( var i = 0; i < arrays.length; i ++ )
    {
      result = result.concat( arrays[ i ] );
    }
    
    return result;
  },
  
  /* Function: extend
   * Copies all properties from the source to the destination object.
   *
   * destination
   *   Destination object.
   * source
   *   Source object.
   */
  extend : function( destination, source )
  {
    // Iterate through the source
    foreach ( source, function( key, object )
    {
      destination[ key.toString() ] = object;
    });
    
    return destination;
  },
  
  /* Function: clone
   * Clones an Object.
   *
   * object
   *   The Object to clone.
   */
  clone : function( object, scope )
  {
    // It just might happen to be nothing.
    if ( ! object )
    {
      return object;
    }

    // Check if the object contains a custom clone function for cloning private variables.
    if ( object.hasOwnProperty( "clone" ) )
    {
      return object.clone();
    }
    else if ( typeof object === "function" )
    {
      return function() { return object.apply( scope, arguments ); };
    }
    else
    {
      // Iterate through the Object running this clone function
      var newObject = {};
      var countProperties = 0;

      foreach ( object, function( key, object )
      {
        countProperties ++;
        
        if ( typeof object === "function" )
        {
          newObject[ key ] = function() { return object.apply( newObject, arguments ); };
        }
        else
        {
          var adg = Akari.Utilities.Factory.clone( object );
          newObject[ key ] = adg;
        }
      });
      
      // Check if newObject is empty
      if ( countProperties === 0 )
      {
        // Probably AS3 or an empty shit, make a clone first
        newObject = clone( object );

        if ( object.hasOwnProperty( "numChildren" ) || object.hasOwnProperty( "graphics" ) )
        {
          newObject = $.createCanvas(
          {
            lifeTime : 810114514
          });

          ScriptManager.popEl( newObject );

          // copy some displayObject parameters
          newObject.alpha = object.alpha;
          newObject.blendMode = object.blendMode;
          newObject.filters = object.filters;
          newObject.rotationX = object.rotationX;
          newObject.rotationY = object.rotationY;
          newObject.rotationZ = object.rotationZ;
          newObject.scaleX = object.scaleX;
          newObject.scaleY = object.scaleY;
          newObject.scaleZ = object.scaleZ;
          newObject.scrollRect = object.scrollRect;
          newObject.transform.colorTransform = object.transform.colorTransform;
          newObject.transform.matrix = object.transform.matrix;
          newObject.transform.matrix3D = object.transform.matrix3D;
        }
        
        // Check if it's a DOC
        if ( object.hasOwnProperty( "numChildren" ) )
        {
          for ( var i = 0; i < object.numChildren; i ++ )
          {
            newObject.addChild( Akari.Utilities.Factory.clone( object.getChildAt( i ) ) );
          }
        }
        
        // Check if it's a Shape
        if ( object.hasOwnProperty( "graphics" ) )
        {
          // Clone the Graphic's content
          newObject.graphics.copyFrom( object.graphics );
        }
      }
      
      return newObject;
    }
  },
  
  /* Function: replicate
   * Returns an Array of Objects created according to given params. 
   *
   * constructor
   *   Constructor of the Class to replicate.
   * count
   *   Count of result Objects.
   * paramsFunction
   *   A Function accepting index as parameter, returning an Array of parameters.
   */
  replicate : function( constructor, count, paramsFunction )
  {
    var objects = [];
    
    var i = 0;
    for ( i = 0; i < count; i ++ )
    {
      var newParams;
      
      newParams = paramsFunction ? paramsFunction( i ) : [];
      
      objects.push( constructor.apply( this, newParams ) );
    }
    
    return objects;
  }
};

/* Class Modifier: Clonable
 * Wraps around a constructor to enable better clone behavior.
 */

Akari.Utilities.Clonable = function ( ctor )
{
  return function ()
  {
    var origArgs = [].slice.apply( arguments, [ 0 ] );
    var args = origArgs;
    var wrap = function ()
    {
      var obj = ctor.apply( this, args );
      obj.clone = wrap;
      args = Akari.Utilities.Factory.clone( origArgs );
      return obj;
    };
    return wrap();
  };
};


/* Static Class: Timer
 * Improves timing precision over Player.time by sampling time usage for each frame. For retaining both smoothness and seekability.
 */
Akari.Utilities.Timer = function()
{
  var lastTime = 0;
  var deltaTime = 0;
  var sampleCount = 1;
  
  return
  {
    time : 0,
    
    /* Function: update
     * Counts a frame and updates time.
     */
    update : function()
    {
      if ( Player.time != lastTime )
      {
        // Make drastic change proof
        if ( Math.abs( Player.time - lastTime ) < 1000 )
        {
          deltaTime = ( Player.time - lastTime ) / sampleCount;
          lastTime = Player.time;
          sampleCount = 1;
          
          this.time = Player.time;
        }
        else
        {
          // Reset Timer because of a possible seek (or just so laggy that Timer is not effective)
          deltaTime = 0;
          lastTime = Player.time;
          sampleCount = 1;
          
          this.time = Player.time;
        }
      }
      else
      {
        this.time = lastTime + deltaTime * sampleCount;
        sampleCount ++;
      }
    }
  };
}();

/* Class: Binder
 * Provides functions for binding properties. Mainly used in layers.
 *
 * object
 *   An Object to bind.
 * properties
 *   An Object, containing values or Bindings for each property.
 * overridePathCheck
 *   [default] false
 *   Specifying this will override path checking, so that new properties can be added to the object.
 *   It is impossible to add new properties on AS3 objects (Error #1056), hence the protective mechanism. Override only if the feature is needed.
 */
Akari.Utilities.Binder = function()
{
  var binderClass = function( params )
  {
    var registry = [];
    var lookup = {};
    var needRefresh = true;

    var setParam = function( object, name, value )
    {
      var dotIndex = name.indexOf(".");
      if ( dotIndex < 0 )
      {
        if ( params.overridePathCheck || object.hasOwnProperty( name ) )
        {
          object[ name ] = value;
        }
      }
      else
      {
        var midName = name.substring( 0, dotIndex );
        if ( params.overridePathCheck )
        {
          if ( !object.hasOwnProperty( midName ) )
          {
            object[ midName ] = {};
          }
          setParam( object[ midName ], name.substring( dotIndex + 1 ), value );
        }
        else
        {
          if ( object.hasOwnProperty( midName ) )
          {
            setParam( object[ midName ], name.substring( dotIndex + 1 ), value );
          }
        }
      }
    };
    
    foreach( params.properties, function( key, obj )
    {
      var changeType = null;
      var value = null;

      if ( typeof( obj ) === "function" )
      {
        changeType = 100;
      }
      else if ( obj.hasOwnProperty( "linkFunc" ) )
      {
        changeType = obj.linkFunc ? 201 : 200;
      }
      else if ( obj.hasOwnProperty( "multiFunc" ) )
      {
        changeType = 300;
      }
      else
      {
        value = obj;
      }

      registry.push( [ key, obj, changeType, [], value ] );
    });

    // second pass generates dependency
    for ( var k = registry.length; k --; )
    {
      lookup[ registry[ k ][ 0 ] ] = k;
    }

    for ( var k = registry.length; k --; )
    {
      if ( registry[ k ][ 2 ] === 201 || registry[ k ][ 2 ] === 200 )
      {
        var dependency = [];
        var names = [ registry[ k ][ 1 ].names ];

        while ( names.length > 0 )
        {
          var currentNames = names.pop();
          dependency = dependency.concat( currentNames );
          for ( var n = currentNames.length; n --; )
          {
            if ( registry[ 0 + lookup[ "" + currentNames[ n ] ] ][ 2 ] === 201 || registry[ 0 + lookup[ "" + currentNames[ n ] ] ][ 2 ] === 200 )
            {
              names.push( registry[ 0 + lookup[ "" + currentNames[ n ] ] ][ 1 ].names );
            }
          }
        }

        registry[ k ][ 3 ] = dependency;
      }
    }

    // sort by dependency
    registry.sort( function( a, b )
    {
      if ( a[ 3 ].length !== 0 && b[ 3 ].length === 0 )
      {
        return 1;
      }
      if ( a[ 3 ].length === 0 && b[ 3 ].length !== 0 )
      {
        return -1;
      }
      if ( a[ 3 ].indexOf( b[ 0 ] ) >= 0 )
      {
        return 1;
      }
      if ( b[ 3 ].indexOf( a[ 0 ] ) >= 0 )
      {
        return -1;
      }
      if ( a[ 2 ] && !b[ 2 ] )
      {
        return 1;
      }
      else if ( b[ 2 ] && !a[ 2 ] )
      {
        return -1;
      }
      return 0;
    });

    var loopStart = registry.length;
    for ( var k = registry.length; k --; )
    {
      lookup[ registry[ k ][ 0 ] ] = k;
      if ( registry[ k ][ 2 ] )
      {
        loopStart = k;
      }
      else
      {
        setParam( params.object, registry[ k ][ 0 ], registry[ k ][ 4 ] );
      }
    }
    
    return
    {
      
      /* Function: update
       * Updates the object to fit the timeline.
       *
       * time
       *   A Number, the current time (in milliseconds) on the Composition's timeline.
       * scope
       *   [default] object
       *   An Object, scope under which the binded functions are called.
       */
      update : function( time, scope )
      {
        ////#IF (IST DEBUG)
        Akari.intoProcess( Akari.processID.BINDER );
        ////#ENDIF
        for ( var i = loopStart; i < registry.length; i ++ )
        {
          switch ( registry[ i ][ 2 ] )
          {
            case 100 :
              ////#IF (IST DEBUG)
              Akari.intoProcess( Akari.processID.USER );
              ////#ENDIF
              registry[ i ][ 4 ] = registry[ i ][ 1 ].apply( scope || params.object, [ time ] );
              ////#IF (IST DEBUG)
              Akari.outOfProcess();
              ////#ENDIF
              break;
            case 200 :
              // should be computed already
              registry[ i ][ 4 ] = registry[ 0 + lookup[ "" + registry[ i ][ 3 ][ 0 ] ] ][ 4 ];
              break;
            case 201 :
              var funcArgs = [];
              var names = registry[ i ][ 3 ];

              for ( var a = 0; a < names.length; a ++ )
              {
                funcArgs.push( registry[ 0 + lookup[ "" + names[ a ] ] ][ 4 ] );
              }

              funcArgs.push( time );

              ////#IF (IST DEBUG)
              Akari.intoProcess( Akari.processID.USER );
              ////#ENDIF
              registry[ i ][ 4 ] = registry[ i ][ 1 ].linkFunc.apply( scope || params.object, funcArgs );
              ////#IF (IST DEBUG)
              Akari.outOfProcess();
              ////#ENDIF
              break;
            case 300 :
              ////#IF (IST DEBUG)
              Akari.intoProcess( Akari.processID.USER );
              ////#ENDIF
              registry[ i ][ 4 ] = registry[ i ][ 1 ].multiFunc.apply( scope || params.object, [ time ] );
              ////#IF (IST DEBUG)
              Akari.outOfProcess();
              ////#ENDIF
              var names = registry[ i ][ 1 ].names;

              for ( var a = 0; a < names.length; a ++ )
              {
                setParam( params.object, names[ a ], registry[ i ][ 4 ][ a ] );
              }
              break;
          }
          setParam( params.object, registry[ i ][ 0 ], registry[ i ][ 4 ] );
        }
        ////#IF (IST DEBUG)
        Akari.outOfProcess();
        ////#ENDIF
      }
    };
  };

  /* Class: Binder.Link
   * Represents a link between different properties.
   *
   * name
   *   The name of the property to link.
   * names
   *   [default] [ name ]
   *   Array of strings. Overrides name if specified.
   * linkFunc
   *   [default] null
   *   A Function accepting input & time from binder or null indicating copy.
   */
  binderClass.Link = function( params )
  {
    return
    {
      names : params.names || [ params.name ],
      linkFunc : params.linkFunc || null
    };
  };

  /* Class: Binder.Multi
   *
   * names
   *   Array of strings.
   * func
   *   A Function returning an array of values corresponding to names.
   */
  binderClass.Multi = function( params )
  {
    return
    {
      names : params.names,
      multiFunc : params.func
    };
  };
  
  return binderClass;
}();

////#IF (NF INCL_COLOR)

/* Static Class: Color
 * Provides functions for color space conversions.
 */
Akari.Utilities.Color = function()
{
  var xN = 0.95047;
  var yN = 1.0000;
  var zN = 1.08883;

  var labInvF = function( t )
  {
    if ( t > 0.008856451679035631 )
    {
      return t * t * t;
    }
    else
    {
      return 0.12841854934601665 * ( t - 0.13793103448275862 );
    }
  };

  return {
    hslToRgb : function( hsl )
    {
      var h = hsl[ 1 ] % 360;
      var c = ( 1 - Math.abs( 2 * hsl[ 3 ] - 1 ) ) * hsl[ 2 ];
      var x = c * ( 1 - Math.abs( ( h / 60 ) % 2 - 1 ) );
      var m = hsl[ 3 ] - c / 2;

      if ( h < 60 )
      {
        return [ c + m, x + m, m ];
      }
      if ( h < 120 )
      {
        return [ x + m, c + m, m ];
      }
      if ( h < 180 )
      {
        return [ m, c + m, x + m ];
      }
      if ( h < 240 )
      {
        return [ m, x + m, c + m ];
      }
      if ( h < 300 )
      {
        return [ x + m, m, c + m ];
      }
      return [ hsl[ 0 ], c + m, m, x + m ];
    },

    labToRgb : function( lab )
    {
      var t = ( lab[ 1 ] + 16 ) / 116;

      var xyz =
      [
        xN * labInvF( t + lab[ 2 ] / 500 ),
        yN * labInvF( t ),
        zN * labInvF( t - lab[ 3 ] / 200 )
      ];

      var rgb =
      [
        lab[ 0 ],
        3.2406 * xyz[ 0 ] - 1.5372 * xyz[ 1 ] - 0.4986 * xyz[ 2 ],
        - 0.9689 * xyz[ 0 ] + 1.8758 * xyz[ 1 ] + 0.0415 * xyz[ 2 ],
        0.0557 * xyz[ 0 ] - 0.2040 * xyz[ 1 ] + 1.0570 * xyz[ 2 ]
      ];

      for ( var i = 2; i >= 1; i -- )
      {
        if ( rgb[ 0 + i ] > 0.0031308 )
        {
          rgb[ 0 + i ] = 1.055 * Math.pow( rgb[ 0 + i ], 1 / 2.4 ) - 0.055;
        }
        else
        {
          rgb[ 0 + i ] = 12.92 * rgb[ 0 + i ];
        }
      }

      return rgb;
    },

    rgbToHardware : function( rgb )
    {
      var r = Math.min( 255, Math.max( 0, Math.floor( rgb[ 1 ] * 255 ) ) );
      var g = Math.min( 255, Math.max( 0, Math.floor( rgb[ 2 ] * 255 ) ) );
      var b = Math.min( 255, Math.max( 0, Math.floor( rgb[ 3 ] * 255 ) ) );
      return ( r << 16 ) | ( g << 8 ) | b;
    },

    rgbToTransformTint : function( rgb )
    {
      return $.createColorTransform( rgb[ 1 ], rgb[ 2 ], rgb[ 3 ], rgb[ 0 ] );
    },

    rgbToTransformAdd : function( rgb )
    {
      return $.createColorTransform( 1, 1, 1 ,1, rgb[ 1 ] * 255, rgb[ 2 ] * 255, rgb[ 3 ] * 255, rgb[ 0 ] * 255 );
    }
  };
}();

////#ENDIF

////#IF (NF INCL_VECTOR)

/* Static Class: Vector
 * Provides functions for vector operations.
 */
Akari.Utilities.Vector =
{
  add : function()
  {
    var dimension = arguments[ 0 ].length;
    var result = [];
    for ( var d = 0; d < dimension; d ++ )
    {
      result[ d ] = arguments[ 0 ][ d ];
    }

    for ( var i = 1; i < arguments.length; i ++ )
    {
      for ( var d = 0; d < dimension; d ++ )
      {
        result[ d ] += arguments[ i ][ d ];
      }
    }

    return result;
  },

  subtract : function( a, b )
  {
    var dimension = a.length;
    var result = [];

    for ( var d = 0; d < dimension; d ++ )
    {
      result[ d ] = a[ d ] - b[ d ];
    }

    return result;
  },

  dot : function( a, b )
  {
    var dimension = a.length;
    var result = 0;

    for ( var d = 0; d < dimension; d ++ )
    {
      result += a[ d ] * b[ d ];
    }

    return result;
  },

  scale : function( v, s )
  {
    var dimension = v.length;
    var result = [];

    for ( var d = 0; d < dimension; d ++ )
    {
      result[ d ] = v[ d ] * s;
    }

    return result;
  },

  length : function( v )
  {
    var dimension = v.length;
    var result = 0;

    for ( var d = 0; d < dimension; d ++ )
    {
      result += v[ d ] * v[ d ];
    }

    result = Math.sqrt( result );

    return result;
  },

  unit : function( v )
  {
    return this.scale( v, 1 / this.length( v ) );
  },

  angle : function( a, b )
  {
    return Math.acos( this.dot( a, b ) / ( this.length( a ) * this.length( b ) ) );
  }
};

////#ENDIF

////#IF (NF INCL_RAND)

/* Static Class: Randomizer
 * Provides functions creating randomizers by user provided seed.
 */
Akari.Utilities.Randomizer = function()
{
  // Common mixin for all types
  var randomizerMixin =
  {
    integer : function( min, max )
    {
      var t = this.uniform();
      return Math.floor( min + t * ( max - min ) );
    },
    gaussian : function()
    {
      var store = null;

      return function()
      {
        if ( store === null )
        {
          var x1 = this.uniform();
          var x2 = this.uniform();

          var t1 = Math.sqrt( -2 * Math.log( x1 ) );
          var t2 = 2 * Math.PI * x2;

          store = t1 * Math.sin( t2 );
          return t1 * Math.cos( t2 );
        }
        else
        {
          var ret = store;
          store = null;
          return ret;
        }
      };
    }(),

    vector : function( dimension )
    {
      var vector = [];
      var t;
      var len = 0;

      for ( var i = dimension; i --; )
      {
        t = this.gaussian();
        vector[ i ] = t;
        len += t * t;
      }

      len = Math.sqrt( len );

      for ( var i = dimension; i --; )
      {
        vector[ i ] = vector[ i ] / len;
      }

      return vector;
    }
  };

  var randomizerNs = 
  {
    createNative : function()
    {
      return Akari.Utilities.Factory.extend(
      {
        uniform : Math.random
      }, randomizerMixin );
    },

    createLCG : function( seed )
    {
      var seed = seed;

      return Akari.Utilities.Factory.extend(
      {
        uniform : function()
        {
          seed = ( 0x343FD * seed + 0x269EC3 ) % 0x100000000;
          return ( ( seed & 0x7FFF0000 ) >> 16 ) / 0x8000;
        }
      }, randomizerMixin );
    },

    createTwister : function( seed )
    {
      var numbers = [];
      var index = 0;

      numbers[ 0 ] = seed;
      for ( var i = 1; i < 624; i ++ )
      {
        numbers[ i ] = ( 0x6C078965 * ( numbers[ i - 1 ] ^ ( numbers[ i - 1 ] >>> 30 ) ) + i ) & 0xFFFFFFFF;
      }

      return Akari.Utilities.Factory.extend(
      {
        uniform : function()
        {
          if ( index > 623 )
          {
            for ( var k = 0; k < 624; k ++ )
            {
              var y = ( numbers[ k ] & 0x80000000 ) + ( numbers[ ( k + 1 ) % 624 ] & 0x7FFFFFFF );
              numbers[ k ] = numbers[ ( k + 397 ) % 624 ] ^ ( y >>> 1 );
              if ( y % 2 !== 0 )
              {
                numbers[ k ] = numbers[ k ] ^ 0x9908B0DF;
              }
            }

            index = 0;
          }

          var n = numbers[ index ];
          n = n ^ ( n >>> 11 );
          n = n ^ ( ( n << 7 ) & 0x9D2C5680 );
          n = n ^ ( ( n << 15 ) & 0xEFC60000 );
          n = n ^ ( n >>> 18 );
          index ++;

          // force the value into unsigned
          return ( n >>> 0 ) / 0x100000000;
        }
      }, randomizerMixin );
    }
  };

  var defaultRandomizer = randomizerNs.createTwister( 810114514 );

  return Akari.Utilities.Factory.extend( Akari.Utilities.Factory.extend( defaultRandomizer, randomizerMixin ), randomizerNs );
}();

////#ENDIF