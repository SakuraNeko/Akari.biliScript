// {{Depend : Akari}} //
// {{Depend : Akari.Utilities}} //

/* Namespace: Akari.Display
 * This sort of classes are abstractions of display objects for use in production.
 */

Akari.Display = {};
 
/* Class: Layer
 * Provides functions for animating contents.
 *
 * source
 *   A DisplayObject serving as the layer source.
 * inPoint
 *   A Number, the time (in milliseconds) at which the layers enters.
 * outPoint
 *   A Number, the time (in milliseconds) at which the layers exits.
 * properties
 *   [default] {}
 *   An Object, containing values or Bindings for each AS3 property.
 * effects
 *   Array( [ Constructor effect, PlainObject params ] ). Effects should have an stackInterface that handles pipelining.
 *   stackInterface should be a Function( Layer, PlainObject params ) that incorporates the missing Layer parameter into params and calls effect Constructor.
 */
Akari.Display.Layer = function( params )
{
  // Create a private binder for properties
  var binder = Akari.Utilities.Binder({ object : params.source, properties : params.properties || {} });
  
  var layer =
  {
    source : params.source,
    inPoint : params.inPoint,
    outPoint : params.outPoint,
    
    /* Function: update
     * Updates the layer to fit the timeline.
     *
     * time
     *   A Number, the current time (in milliseconds) on the Composition's timeline.
     */
    update : function( time )
    {
      if ( time < params.inPoint || time >= params.outPoint )
      {
        this.source.visible = false;
      }
      else
      {
        // Set source visible first, so that it can be overridden by binder.
        this.source.visible = true;
        
        binder.update( time, this.getBinderScope() );
      }
    },
    
    /* Function: getBinderScope
     * Dynamically return self for use as scope in Binders.
     */
    getBinderScope : function()
    {
      return this;
    },
    
    /* Function: clone
     * Custom clone function for binder to work.
     */
    clone : function()
    {
      return Akari.Display.Layer( Akari.Utilities.Factory.clone( params ) );
    }
  };

  // effect stack support
  if ( params.effects )
  {
    for ( var i = 0; i < params.effects.length; i ++ )
    {
      layer = params.effects[ i ][ 0 ].stackInterface( layer, params.effects[ i ][ 1 ] );
    }
  }
  
  // Update Layer for a first time to prevent flashing
  layer.update( params.inPoint );
  
  return layer;
};

/* Class: DynamicSourceLayer
 * A type of layer specialized to handle dynamic layer sources.
 *
 * provider
 *   A DynamicLayerSourceProvider.
 * inPoint
 *   A Number, the time (in milliseconds) at which the layers enters.
 * outPoint
 *   A Number, the time (in milliseconds) at which the layers exits.
 * inPointTime
 *   [default] provider.startTime
 *   A Number, the time (in milliseconds) the DynamicLayerSourceProvider is at when the layers enters.
 * outPointTime
 *   [default] provider.startTime + provider.duration
 *   A Number, the time (in milliseconds) the DynamicLayerSourceProvider is at when the layers exits.
 * timeRemap
 *   [default] null
 *   A Function or null, depending on whether you need time remapping. Setting this function overrides inPointTime and outPointTime settings.
 *   The function should accept a parameter time (in milliseconds) the current time.
 * properties
 *   [default] {}
 *   An Object, containing values or Bindings for each AS3 property.
 * effects
 *   Array( [ Constructor effect, PlainObject params ] ). Effects should have an stackInterface that handles pipelining.
 *   stackInterface should be a Function( Layer, PlainObject params ) that incorporates the missing Layer parameter into params and calls effect Constructor.
 */
Akari.Display.DynamicSourceLayer = function( params )
{
  var nestedProvider = params.provider;
  var inPointTime = params.inPointTime || nestedProvider.startTime;
  var outPointTime = params.outPointTime || nestedProvider.startTime + nestedProvider.duration;
  
  // Create a Layer.
  var layer = Akari.Display.Layer(
  {
    source : nestedProvider.canvas,
    inPoint : params.inPoint,
    outPoint : params.outPoint,
    properties : params.properties
  });
  
  // Simulate inheritance by making a backup of update function.
  var baseUpdate = Akari.Utilities.Factory.clone( layer.update, layer );
  
  // Declare new update regarding nested DynamicLayerSourceProvider timeline.
  // Declare different functions according to having timeRemap or not to improve performance.
  if ( params.timeRemap )
  {
    layer.update = function( time )
    {
      baseUpdate( time );
      
      if ( this.source.visible )
        nestedProvider.update( params.timeRemap( time ) );
    };
  }
  else
  {
    layer.update = function( time )
    {
      baseUpdate( time );
      
      if ( this.source.visible )
        nestedProvider.update( inPointTime + ( time - params.inPoint ) * (outPointTime - inPointTime) / ( params.outPoint - params.inPoint) );
    };
  }
    
  /* Function: clone
   * Custom clone function for binder to work.
   */
  layer.clone = function()
  {
    return Akari.Display.DynamicSourceLayer( Akari.Utilities.Factory.clone( params ) );
  };

  // effect stack support
  if ( params.effects )
  {
    for ( var i = 0; i < params.effects.length; i ++ )
    {
      layer = params.effects[ i ][ 0 ].stackInterface( layer, params.effects[ i ][ 1 ] );
    }
  }
  
  // Update Layer for a first time to prevent flashing
  layer.update( params.inPoint );
  
  return layer;
};

/* Class: Composition
 * A DynamicLayerSourceProvider that provides functions as the framework of a scene.
 *
 * width
 *   [default] $.width
 *   A Number specifying stage width.
 * height
 *   [default] $.height
 *   A Number specifying stage height.
 * startTime
 *   [default] 0
 *   A Number, the time (in milliseconds) when the timeline starts.
 * duration
 *   [default] 60000
 *   A Number, the length (in milliseconds) of the timeline.
 * layers
 *   [default] []
 *   An Array of Layers, from top to bottom.
 * hasBoundaries
 *   [default] false
 *   Whether a mask will be put on the canvas so that elements outside become invisible.
 */
Akari.Display.Composition = function( params )
{
  var canvas = Akari.Display.Sprite();
  if ( params.hasBoundaries )
  {
    var solidMask = Akari.Display.Solid({ width : params.width || $.width, height : params.height || $.height, color : 0x0 });
    canvas.addChild( solidMask );
    canvas.mask = solidMask;
  }
  
  var layers = Akari.Utilities.Factory.collapse( params.layers || [] );
  var i = 0;
  
  for ( i = 0; i < layers.length; i ++ )
  {
    canvas.addChild( layers[ i ].source );
    layers[ i ].parent = this;
  }
  
  return
  {
    width : params.width || $.width,
    height : params.height || $.height,
    startTime : params.startTime || 0,
    duration : params.duration || 60000,
    layers : layers,
    canvas : canvas,
    
    /* Function: update
     * Updates the canvas to fit the timeline.
     *
     * time
     *   A Number, the current time (in milliseconds) on the Composition's own timeline.
     */
    update : function( time )
    {
      // Check if Composition is active, otherwise update for borderline situations.
      if ( time < startTime )
        return this.update( startTime );
      if ( time >= startTime + duration )
        return this.update( startTime + duration - 1 );

      ////#IF (IST DEBUG)
      Akari.intoProcess( Akari.processID.COMP );
      ////#ENDIF
      for ( var i = layers.length; i --; )
      {
        var lr = layers[ 0 + i ];
        if ( time < lr.inPoint || time >= lr.outPoint )
        {
          lr.source.visible = false;
        }
        else
        {
          // Set source visible first, so that it can be overridden by binder.
          lr.source.visible = true;
          
          ////#IF (IST DEBUG)
          Akari.intoProcess( Akari.processID.LAYER );
          ////#ENDIF
          lr.update( time );
          ////#IF (IST DEBUG)
          Akari.outOfProcess();
          ////#ENDIF
        }
      }
      ////#IF (IST DEBUG)
      Akari.outOfProcess();
      ////#ENDIF
    },
    
    /* Function: clone
     * Custom clone function to ensure masking work.
     */
    clone : function()
    {
      return Akari.Display.Composition( Akari.Utilities.Factory.clone( params ) );
    }
  };
};

/* Class: MainComposition
 * Provides functions as the framework of the comment art. Only MainCompositions have ability to be presented.
 *
 * width
 *   [default] $.width
 *   A Number specifying stage width.
 * height
 *   [default] $.height
 *   A Number specifying stage height.
 * startTime
 *   [default] 0
 *   A Number, the time (in milliseconds) when the timeline starts.
 * duration
 *   [default] 60000
 *   A Number, the length (in milliseconds) of the timeline.
 * layers
 *   [default] []
 *   An Array of Layers, from top to bottom.
 * hasBoundaries
 *   [default] true
 *   Whether a mask will be put on the canvas so that elements outside become invisible.
 */
Akari.Display.MainComposition = function( params )
{
  if (!( params.hasBoundaries === false ))
  {
    params.hasBoundaries = true;
  }
  
  var composition = Akari.Display.Composition( params );
  
  // Remember when did the comp last update to maintain seekability.
  var lastUpdate = -1;
  
  // Remember the player size to maintain scalability
  var lastWidth, lastHeight;

  ////#IF (IST DEBUG)
  var perfInterval = 30;
  ////#ENDIF
  
  // Prepare the frame function, need a private handle for removing.
  var frameFunction = function()
  {
    ////#IF (IST DEBUG)
    Akari.outOfProcess();
    perfInterval --;
    if ( perfInterval === 0 )
    {
      Akari.updatePerformanceDisplay();
      perfInterval = 30;
    }
    ////#ENDIF

    // Check if player is running
    if ( Player.state === "playing" )
    {        
      Akari.Utilities.Timer.update();
      
      composition.update( Akari.Utilities.Timer.time );
    }
    else
    {
      // When player is not running, check last update time to ensure seekability.
      if ( lastUpdate != Player.time )
        composition.update( Player.time );
    }
    
    // Check if player size changed
    // I dislike polling but can't find a event to listen for this. Need suggestion
    if ( $.width != lastWidth || $.height != lastHeight )
    {
      maximizeInContainer();
      
      lastWidth = $.width;
      lastHeight = $.height;
    }

    ////#IF (IST DEBUG)
    Akari.intoProcess( Akari.processID.FLASH );
    ////#ENDIF
  };
  
  var maximizeInContainer = function()
  {
    ratio = Math.min( $.width / Akari.root.scaleX / composition.width, $.height / Akari.root.scaleY / composition.height );
    composition.canvas.scaleX = ratio;
    composition.canvas.scaleY = ratio;
    
    composition.canvas.x = ( $.width / Akari.root.scaleX - composition.width * ratio ) / 2;
    composition.canvas.y = ( $.height / Akari.root.scaleY - composition.height * ratio ) / 2;
  };
  
  // Declare new update for update time stuff
  var baseUpdate = Akari.Utilities.Factory.clone( composition.update, composition );
  
  composition.update = function( time )
  {
    lastUpdate = time;
    baseUpdate( time );
  };

  /* Function: present
   * Presents the composition immediately. Only one Composition can be presented at a time.
   */
  composition.present = function()
  {
    this.canvas.addEventListener( "enterFrame", frameFunction );
    
    Akari.root.addChild( this.canvas );
    
    frameFunction();
  };
    
  /* Function: detach
   * Detaches the composition from player.
   */
  composition.detach = function()
  {
    this.canvas.removeEventListener( "enterFrame", frameFunction );
    
    Akari.root.removeChild( this.canvas );
  };
    
  /* Function: clone
   * Custom clone function for binder to work.
   */
  composition.clone = function()
  {
    return Akari.Display.MainComposition( Akari.Utilities.Factory.clone( params ) );
  };
  
  // Return Composition
  return composition;
};

/* Static Function: getInstance
 * Read the global variable. Only avaiable after one has been presented.
 */
Akari.Display.MainComposition.getInstance = function()
{
  return Global._get("__mainComp_akari");
};

/* Class: Animation
 * A DynamicLayerSourceProvider with primitive stop motion animation support.
 *
 * frames
 *   An Array of functions with signature function( graphics ){ }.
 * frameRate
 *   [default] 12
 *   The rate at which the animation is played.
 *   Setting a rate much too high while having a complex scene can probably cause performance problems.
 */
Akari.Display.Animation = function( params )
{
  var lastFrame = 0;
  var frameRate = params.frameRate || 12;
  
  // Function for getting the current frame
  var findCurrentIndex = function( time )
  {
    return Math.floor( time * frameRate / 1000 );
  };
  
  var canvas = Akari.Display.Shape();
  
  return
  {
    startTime : 0,
    duration : params.frames.length * 1000 / frameRate,
    canvas : canvas,
    
    /* Function: update
     * Updates the canvas to fit the timeline.
     *
     * time
     *   A Number, the current time (in milliseconds) on the Animation's own timeline.
     */
    update : function( time )
    {
      // Check if an update is needed
      var currentFrame = findCurrentIndex( time );
      if ( currentFrame === lastFrame ) return;
      
      canvas.graphics.clear();
      params.frames[ currentFrame ]( canvas.graphics );
      
      lastFrame = currentFrame;
    },
    
    /* Function: clone
     * Custom clone function for canvas and such.
     */
    clone : function()
    {
      return Akari.Display.Animation( Akari.Utilities.Factory.clone( params ) );
    }
  };
};

/* Class: Sprite
 * Shortcut for AS3 Sprite.
 */
Akari.Display.Sprite = function()
{
  var sprite = $.createCanvas(
  {
    lifeTime : 810114514
  });
  
  ScriptManager.popEl( sprite );
  
  // remove 3D to make it clear by default
  sprite.transform.matrix3D = null;
  
  return sprite;
};

/* Class: Shape
 * Shortcut for AS3 Shape.
 */
Akari.Display.Shape = function()
{
  var shape = $.createShape(
  {
    lifeTime : 810114514
  });
  
  ScriptManager.popEl( shape );
  
  // remove 3D to make it clear by default
  shape.transform.matrix3D = null;
  
  return shape;
};

////#IF (ISF INCL_TEXT)

/* Class: Text
 * Shortcut for AS3 TextField.
 *
 * preserveGlow
 *   [default] false
 *   Whether to preserve the original glow filter
 */
Akari.Display.Text = function( preserveGlow )
{
  var text = $.createComment( "",
  {
    lifeTime : 810114514
  });
  
  ScriptManager.popEl( text );
  
  if ( !preserveGlow ) text.filters = null;
  
  // remove 3D to make it clear by default
  text.transform.matrix3D = null;
  
  return text;
};

////#ENDIF

/* Class: Solid
 * A solid color layer source.
 *
 * width
 *   A Number specifying solid width.
 * height
 *   A Number specifying solid height.
 * color
 *   A Number specifying solid color.
 */
Akari.Display.Solid = function( params )
{
  var shape = Akari.Display.Shape();
  
  shape.graphics.beginFill( params.color );
  shape.graphics.drawRect( 0, 0, params.width, params.height );
  shape.graphics.endFill();
  
  return shape;
};

////#IF (NF INCL_SHAND)

/* Class: Anchor
 * Anchors the layer source at a specific point
 *
 * source
 *   The DisplayObject to wrap around
 * x
 *   [default] source.width / 2
 *   Anchor X.
 * y
 *   [default] source.height / 2
 *   Anchor Y.
 */
Akari.Display.Anchor = function( params )
{
  var sprite = Akari.Display.Sprite();
  
  sprite.addChild( params.source );
  params.source.x = - ( params.x || params.source.width / 2 );
  params.source.y = - ( params.y || params.source.height / 2 );
  
  return sprite;
};


/* Class: Anchor3D
 * Anchors the layer source at a specific point in 3D space
 *
 * source
 *   The DisplayObject to wrap around
 * x
 *   [default] source.width / 2
 *   Anchor X.
 * y
 *   [default] source.height / 2
 *   Anchor Y.
 * z
 *   [default] 0
 *   Anchor Z.
 */
Akari.Display.Anchor3D = function( params )
{
  var sprite = Akari.Display.Sprite();
  
  sprite.addChild( params.source );
  params.source.x = - ( params.x || params.source.width / 2 );
  params.source.y = - ( params.y || params.source.height / 2 );
  params.source.z = - ( params.z || 0 );
  
  return sprite;
};

/* Class: AnchorProvider
 * Anchors the provider at a specific point
 *
 * provider
 *   The DynamicLayerSourceProvider to wrap around
 * x
 *   [default] source.width / 2
 *   Anchor X.
 * y
 *   [default] source.height / 2
 *   Anchor Y.
 */
Akari.Display.AnchorProvider = function( params )
{
  return {
    startTime: params.provider.startTime,
    duration: params.provider.duration,
    canvas: Akari.Display.Anchor({ source : params.provider.canvas, x : params.x, y : params.y }),
    update: function( time )
    {
      return params.provider.update( time );
    }
  };
};

/* Class: AnchorProvider3D
 * Anchors the provider at a specific point in 3D space
 *
 * provider
 *   The DynamicLayerSourceProvider to wrap around
 * x
 *   [default] source.width / 2
 *   Anchor X.
 * y
 *   [default] source.height / 2
 *   Anchor Y.
 * z
 *   [default] 0
 *   Anchor Z.
 */
Akari.Display.AnchorProvider3D = function( params )
{
  return {
    startTime: params.provider.startTime,
    duration: params.provider.duration,
    canvas: Akari.Display.Anchor3D({ source : params.provider.canvas, x : params.x, y : params.y, z : params.z }),
    update: function( time )
    {
      return params.provider.update( time );
    }
  };
};

/* Class: Checkerboard
 * A checkboard layer source.
 *
 * width
 *   A Number specifying checkboard width.
 * height
 *   A Number specifying checkboard height.
 * frequencyX
 *   Number of blocks on X axis.
 * frequencyY
 *   Number of blocks on Y axis.
 * color1
 *   A Number specifying checkboard background color.
 * color2
 *   A Number specifying checkboard foreground color.
 */
Akari.Display.Checkerboard = function( params )
{
  var shape = Akari.Display.Shape();
  
  shape.graphics.beginFill( params.color1 );
  shape.graphics.drawRect( 0, 0, params.width, params.height );
  shape.graphics.endFill();
  
  // Draw the foreground
  shape.graphics.beginFill( params.color2 );
  
  // Draw the horizontal snake
  var i = 0;
  for ( i = 0; i <= params.frequencyY; i ++ )
  {
    if ( i % 2 === 0 )
    {
      shape.graphics.lineTo( 0, params.height * i / params.frequencyY );
      shape.graphics.lineTo( params.width, params.height * i / params.frequencyY );
    }
    else
    {
      shape.graphics.lineTo( params.width, params.height * i / params.frequencyY );
      shape.graphics.lineTo( 0, params.height * i / params.frequencyY );
    }
  }
  if ( params.frequencyY % 2 === 0 )
  {
    shape.graphics.lineTo( params.width, 0 );
  }
  shape.graphics.lineTo( 0, 0 );
  
  // Draw the vertical snake
  shape.graphics.moveTo( 0, 0 );
  for ( i = 0; i <= params.frequencyX; i ++ )
  {
    if ( i % 2 === 0 )
    {
      shape.graphics.lineTo( params.width * i / params.frequencyX, 0 );
      shape.graphics.lineTo( params.width * i / params.frequencyX, params.height );
    }
    else
    {
      shape.graphics.lineTo( params.width * i / params.frequencyX, params.height );
      shape.graphics.lineTo( params.width * i / params.frequencyX, 0 );
    }
  }
  if ( params.frequencyX % 2 === 0 )
  {
    shape.graphics.lineTo( 0, params.height );
  }
  shape.graphics.lineTo( 0, 0 );
  
  shape.graphics.endFill();
  
  return shape;
};

////#ENDIF