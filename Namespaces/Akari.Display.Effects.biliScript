// {{Depend : Akari}} //
// {{Depend : Akari.Utilities}} //
// {{Depend : Akari.Display}} //

////#IF (NF INCL_FX)

/* Namespace: Akari.Display.Effects
 * This sort of classes are effects that wrap around layers. Not to be confused with filters which should be set with Binders.
 */

Akari.Display.Effects = {};

/* Class: TrackMatte
 * Use another layer as a mask.
 *
 * layer
 *   The Layer to be masked.
 * mask
 *   The mask Layer.
 */
Akari.Display.Effects.TrackMatte = function( params )
{
  // Replace original source with double canvas that contains both display objects,
  // which will be added to the Composition instead.
  var canvas = Akari.Display.Sprite();
  var layerCanvas = Akari.Display.Sprite();
  layerCanvas.addChild( params.layer.source );
  layerCanvas.addChild( params.mask.source );
  var canvasMask = params.mask.clone();
  layerCanvas.addChild( canvasMask.source );
  layerCanvas.mask = canvasMask.source;
  canvas.addChild( layerCanvas );
  params.layer.source = canvas;

  layerCanvas.blendMode = "layer";
  
  // Simulate inheritance by making a backup of update function.
  var baseUpdate = Akari.Utilities.Factory.clone( params.layer.update, params.layer );
  
  params.layer.update = function( time )
  {
    baseUpdate( time );
    params.mask.update( time );
    canvasMask.update( time );

    params.mask.source.blendMode = "alpha";
    canvas.blendMode = params.layer.source.blendMode;
  };
  
  return params.layer;
};

/* Static Function: stackInterface
 * params omits layer.
 */
Akari.Display.Effects.TrackMatte.stackInterface = function( layer, params )
{
  return Akari.Display.Effects.TrackMatte( Akari.Utilities.Factory.extend( params, { layer : layer } ) );
};

/* Class: ForceMotionBlur
 * An effect dedicated to create motion blur effects which Flash lacks. Use the effect with Replicator.
 *
 * layers
 *   The Layers to use.
 * exposureTime
 *   [default] 20.8333333
 *   Exposure time (in milliseconds). Defaults to 1000/48 (double the Player frame rate).
 * shutterPhase
 *   [default] -90
 *   Shutter phase in degrees.
 */
Akari.Display.Effects.ForceMotionBlur = function( params )
{
  if ( !params.exposureTime ) params.exposureTime = 1000.0 / 48.0;
  var shutterOffset = params.exposureTime * ( params.shutterPhase || -90.0 ) / 180.0;
  
  // Use double canvas since to preserve blend mode, the return from adding must be contained by a Sprite with blendMode "layer"
  var canvas = Akari.Display.Sprite();
  var layerCanvas = Akari.Display.Sprite();
  
  // An invisible layer for preserving alpha and blend
  var original = params.layers.shift();
  
  // Add sub-layers to display tree, calculate alpha values to avoid the internal 256 thing
  var subLayers = params.layers;
  var subAlphas = [];
  var totalAlphaYet = 0;
  var i = 0;
  for ( i = 0; i < subLayers.length; i++ )
  {
    var idealTotalAlpha = Math.ceil( 256 * ( i + 1 ) / subLayers.length );
    var subAlpha = idealTotalAlpha - totalAlphaYet;
    subAlphas.push( ( subAlpha + 1 ) / 256 );
    totalAlphaYet += subAlpha;

    var addWrap = Akari.Display.Sprite();
    addWrap.alpha = subAlphas[ i ];
    addWrap.blendMode = "add";
    addWrap.addChild( subLayers[ i ].source );
    layerCanvas.addChild( addWrap );
  }

  layerCanvas.blendMode = "layer";
  canvas.addChild( layerCanvas );
  
  // Create a new layer, binding alpha and blendMode with original layer
  var layer = Akari.Display.Layer(
  {
    source : canvas,
    inPoint : original.inPoint,
    outPoint : original.outPoint
  });
  
  // Simulate inheritance by making a backup of update function.
  var baseUpdate = Akari.Utilities.Factory.clone( layer.update, layer );
  
  // Declare new update
  layer.update = function( time )
  {
    // Update original layer to get binding work
    original.update( time );
    layer.source.blendMode = original.source.blendMode;

    for ( var ir = subLayers.length - 1; ir >= 0; ir -- )
    {
      subLayers[ ir ].update( time + params.exposureTime * ir / subLayers.length + shutterOffset );
      subLayers[ ir ].source.blendMode = "layer";
    }
  };
  
  return layer;
};

/* Static Function: stackInterface
 * params omits layers.
 *
 * sampleCount
 *   [default] 6
 *   Number of samples to use.
 */
Akari.Display.Effects.ForceMotionBlur.stackInterface = function( layer, params )
{
  var layers = [];

  layers.push( layer );

  for ( var i = 0; i < params.sampleCount; i ++ )
  {
    layers.push( Akari.Utilities.Factory.clone( layer ) );
  }

  return Akari.Display.Effects.ForceMotionBlur( Akari.Utilities.Factory.extend( params, { layers : layers } ) );
};

////#ENDIF