// {{Depend : Akari}} //
// {{Depend : Akari.Utilities}} //

////#IF (NF INCL_ANIM)

/* Namespace: Akari.Animation
 * This sort of classes are helpers for creating animation.
 */

Akari.Animation = {};

////#IF (NF INCL_SPLN)

/* Class: BezierComponent
 * Represents one component of a bezier curve.
 *
 * cp
 *  Array of numbers. Coordinates of control points of the component.
 */
Akari.Animation.BezierComponent = function()
{
  var calcBezier = function( t )
  {
    var a = [];
    a[ 0 ] = this.cp;

    for ( var jr = 1; jr < this.cp.length; jr ++ )
    {
      a[ jr ] = [];
      for ( var ir = 0; ir < this.cp.length - jr; ir ++ )
      {
        a[ jr ][ ir ] = ( 1 - t ) * a[ jr - 1 ][ ir ] + t * a[ jr - 1 ][ ir + 1 ];
      }
    }

    return a[ this.cp.length - 1 ][ 0 ];
  };

  var calcSlope = function( t )
  {
    var n = this.cp.length - 1;
    var invT = 1 - t;

    // A = ( 1 - t ) ^ ( n - i - 1 )
    // B = t ^ ( i - 1 )
    // C = ( n choose i )
    // d/dt = P[ i ] * A * B * C * ( i - n * t )
    var a = Math.pow( invT, n - 1 );
    var b = 1 / t;
    var c = 1;

    var sum = this.cp[ 0 ] * a * b * c * ( - n * t );

    for ( var i = 1; i <= n; i ++ )
    {
      // Update ABC values
      a = a / invT;
      b = b * t;
      c = c * ( n - i + 1 ) / i;

      sum += this.cp[ i ] * a * b * c * ( i - n * t );
    }

    return sum;
  };

  return function( cp )
  {
    return
    {
      cp : cp,
      calcBezier : calcBezier,
      calcSlope : calcSlope
    };
  };
}();

/* Class: Spline < Curve
 * Represents one spline.
 *
 * curves
 *  Array of Curves. Dimension is determined by the dimension of the first curve.
 * precision
 *  [default] undefined
 *  Number. Overrides default precision determined by implentations of Curve.
 */
Akari.Animation.Spline = function()
{
  var evaluateAt = function( t )
  {
    return this.evaluateAtLength( this.length * t );
  };

  var evaluateAtLength = function( length, precision )
  {
    var i = 0;

    if ( length < 0 )
    {
      length = 0;
      i = 0;
    }
    else if ( length > this.length )
    {
      length = this.length;
      i = this.curves.length - 1;
    }
    else
    {
      // binary search for the corresponding segment
      var start = 0;
      var end = this.curves.length - 1;
      var loopFlag = true;

      do
      {
        i = Math.floor( ( start + end ) / 2 );

        if ( this.segmentsPosition[ i ] > length )
        {
          end = i;
        }
        else if ( this.segmentsPosition[ i + 1 ] < length )
        {
          if ( i === end - 1 )
          {
            i ++;
            loopFlag = false;
          }
          else
          {
            start = i;
          }
        }
        else
        {
          loopFlag = false;
        }

      } while ( loopFlag );
    }

    // call segment's evaluateAtLength
    if ( precision )
    {
      return this.curves[ i ].evaluateAtLength( length - this.segmentsPosition[ i ], precision );
    }
    else
    {
      return this.segmentsPolyline[ i ].evaluateAtLength( length - this.segmentsPosition[ i ] );
    }
  };

  var getLength = function()
  {
    return this.length;
  };

  var toPolyline = function( precision )
  {
    var newPoints = [];
    if ( precision )
    {
      for ( var i = 0; i < this.curves.length; i ++ )
      {
        newPoints = newPoints.concat( this.curves[ i ].toPolyline( precision ) );
      }

      return Akari.Animation.Polyline( newPoints );
    }
    else
    {
      // just concat stock points
      for ( var i = 0; i < this.segmentsPolyline.length; i ++ )
      {
        newPoints = newPoints.concat( this.segmentsPolyline[ i ].points );
      }

      return Akari.Animation.Polyline( newPoints );
    }
  };

  var concat = function( other )
  {
    var newCurves = this.points.concat( other.curves );
    return Akari.Animation.Spline( newCurves );
  };

  var cloneSelf = function()
  {
    return Akari.Animation.Spline( this.curves );
  };

  return function( curves, precision )
  {
    // calculate length of the spline
    var segmentsLength = [];
    var segmentsPosition = [];
    var segmentsPolyline = [];
    var length = 0;
    var segLength = 0;
    for ( var i = 0; i < curves.length; i ++ )
    {
      segmentsPolyline.push( curves[ i ].toPolyline( precision ) );
      segLength = segmentsPolyline[ i ].getLength();
      segmentsPosition.push( length );
      segmentsLength.push( segLength );
      length += segLength;
    }

    return
    {
      // Spline
      curves : curves,
      concat : concat,
      segmentsPolyline : segmentsPolyline,
      segmentsLength : segmentsLength,
      segmentsPosition : segmentsPosition,
      length : length,
      
      // Curve common
      dimension : curves[ 0 ].dimension,
      evaluateAt : evaluateAt,
      evaluateAtLength : evaluateAtLength,
      getLength : getLength,
      toPolyline : toPolyline,
      toSpline : cloneSelf
    };
  };
}();

/* Class: Polyline < Curve
 * Represents one polyline.
 *
 * points
 *  Array of Array<Number>s. Dimension is determined by the length of the first array.
 */
Akari.Animation.Polyline = function()
{
  var evaluateAt = function( t )
  {
    // Use evaluateAtLength for stuff, since this is easier for polyline
    return this.evaluateAtLength( this.length * t );
  };

  var evaluateAtLength = function( length )
  {
    ////#IF (IST DEBUG)
    Akari.intoProcess( Akari.processID.CURVE );
    ////#ENDIF
    var i = 0;

    if ( length < 0 )
    {
      length = 0;
      i = 0;
    }
    else if ( length > this.length )
    {
      length = this.length;
      i = this.points.length - 2;
    }
    else
    {
      // binary search for the corresponding segment
      var start = 0;
      var end = this.points.length - 2;
      var loopFlag = true;

      do
      {
        i = Math.floor( ( start + end ) / 2 );

        if ( this.segmentsPosition[ i ] > length )
        {
          end = i;
        }
        else if ( this.segmentsPosition[ i + 1 ] < length )
        {
          if ( i === end - 1 )
          {
            i ++;
            loopFlag = false;
          }
          else
          {
            start = i;
          }
        }
        else
        {
          loopFlag = false;
        }

      } while ( loopFlag );
    }
    
    // interpolate
    var p1 = this.points[ i ];
    var p2 = this.points[ i + 1 ];
    var t = ( length - this.segmentsPosition[ i ] ) / this.segmentsLength[ i ];
    var ret = [];

    for ( var d = this.dimension - 1; d >= 0; d -- )
    {
      ret.unshift( p2[ d ] * t + p1[ d ] * ( 1 - t ) );
    }

    ////#IF (IST DEBUG)
    Akari.outOfProcess();
    ////#ENDIF
    return ret;
  };

  var concat = function( other )
  {
    var newPoints = this.points.concat( other.points );
    return Akari.Animation.Polyline( newPoints );
  };

  var getLength = function()
  {
    return this.length;
  };

  var cloneSelf = function()
  {
    return Akari.Animation.Polyline( this.points );
  };
 
  var toSpline = function()
  {
    return Akari.Animation.Spline( [ this ] );
  };

  return function( points )
  {
    // calculate length of the polyline
    var segmentsLength = [];
    var segmentsPosition = [];
    var length = 0;
    var segLength = 0;
    var distance = 0;
    for ( var i = 0; i < points.length - 1; i ++ )
    {
      segLength = 0;
      for ( var d = 0; d < points[ 0 ].length; d ++ )
      {
        distance = points[ i + 1 ][ d ] - points[ i ][ d ];
        segLength += distance * distance;
      }

      segLength = Math.sqrt( segLength );
      segmentsPosition.push( length );
      segmentsLength.push( segLength );
      length += segLength;
    }

    return
    {
      points : points,
      segmentsLength : segmentsLength,
      segmentsPosition : segmentsPosition,
      length : length,
      concat : concat,
      
      // Curve common
      dimension : points[ 0 ].length,
      evaluateAt : evaluateAt,
      evaluateAtLength : evaluateAtLength,
      getLength : getLength,
      toPolyline : cloneSelf,
      toSpline : toSpline
    };
  };
}();

/* Class: Bezier < Curve
 * Represents one bezier curve.
 *
 * points
 *  Array of Array<Number>s. Dimension is determined by the length of the first array.
 */
Akari.Animation.Bezier = function()
{
  var evaluateAt = function( t )
  {
    var ret = [];
    for ( var i = this.dimension - 1; i >= 0; i -- )
    {
      ret.unshift( this.components[ i ].calcBezier( t ) );
    }

    return ret;
  };

  var evaluateAtLength = function( length, precision )
  {
    // Convert to a polyline and evaluate
    return ( this.toPolyline( precision ) ).evaluateAtLength( length );
  };

  var getLength = function( precision )
  {
    // Convert to a polyline and measure polyline length
    return ( this.toPolyline( precision ) ).getLength();
  };

  var subdiv = function( precision, cp, removeRight )
  {
    // check if precision requirements are fulfilled
    var sumDelta = 0;
    var start = 0;
    var step = 0;

    for ( var d = cp.length - 1; d >= 0; d -- )
    {
      start = cp[ d ][ 0 ];
      step = ( cp[ d ][ cp[ d ].length - 1 ] - start ) / ( cp[ d ].length - 1 );
      for ( var i = cp[ d ].length - 2; i >= 1; i -- )
      {
        sumDelta += Math.abs( cp[ d ][ i ] - start - step * i );
      }
    }

    if ( sumDelta <= precision )
    {
      // return null indicating end of subdivision, treat as line
      return null;
    }
    else
    {
      // subdivide and create polyline
      var leftSegment = [];
      var rightSegment = [];
      var poly = [];

      for ( var d = cp.length - 1; d >= 0; d -- )
      {
        leftSegment[ d ] = [ cp[ d ][ 0 ] ];
        rightSegment[ d ] = [];
        poly[ d ] = cp[ d ];
      }

      do 
      {
        var poly2 = [];

        for ( var d = cp.length - 1; d >= 0; d -- )
        {
          poly2[ d ] = [];
          for ( var i = 0; i < poly[ d ].length - 1; i ++ )
          {
            poly2[ d ].push( ( poly[ d ][ i ] + poly[ d ][ i + 1 ] ) / 2 );
          }

          leftSegment[ d ].push( poly2[ d ][ 0 ] );
          rightSegment[ d ].push( poly2[ d ][ poly2[ d ].length - 1 ] );
        }

        poly = poly2;
      } while ( poly[ 0 ].length > 1 );

      for ( var d = cp.length - 1; d >= 0; d -- )
      {
        rightSegment[ d ].unshift( cp[ d ][ cp[ d ].length - 1 ] );
        rightSegment[ d ].reverse();
      }

      // compose resulting polyline from recursive calls
      var leftPoly = subdiv( precision, leftSegment, true );
      var rightPoly = subdiv( precision, rightSegment, removeRight );

      if ( ! leftPoly )
      {
        leftPoly = [ [] ];
        for ( var d = cp.length - 1; d >= 0; d -- )
        {
          leftPoly[ 0 ].unshift( cp[ d ][ 0 ] );
        }
      }

      if ( rightPoly )
      {
        var retPoly = leftPoly.concat( rightPoly );
        return retPoly;
      }
      else
      {
        var tmp = [];

        for ( var d = cp.length - 1; d >= 0; d -- )
        {
          tmp.unshift( rightSegment[ d ][ 0 ] );
        }
        leftPoly.push( tmp );

        if ( ! removeRight )
        {
          tmp = [];

          for ( var d = cp.length - 1; d >= 0; d -- )
          {
            tmp.unshift( rightSegment[ d ][ rightSegment[ d ].length - 1 ] );
          }
          leftPoly.push( tmp );
        }

        return leftPoly;
      }
    }
  };

  var toPolyline = function( precision )
  {
    if ( ! precision )
    {
      // Derive precision from coordinate range, assure 1/100 precision
      var max = 0;
      var min = Math.pow( 10, 309 );

      for ( var d = this.cp.length - 1; d >= 0; d -- )
      {
        for ( var i = this.cp[ d ].length - 1; i >= 0; i-- )
        {
          if ( this.cp[ d ][ i ] > max )
          {
            max = this.cp[ d ][ i ];
          }
          else if ( this.cp[ d ][ i ] < min )
          {
            min = this.cp[ d ][ i ];
          }
        }
      }

      precision = ( max - min ) / 100;
    }

    return Akari.Animation.Polyline( subdiv( precision, this.cp, false ) || [ this.points[ 0 ], this.points[ this.points.length - 1 ] ] );
  };
 
  var toSpline = function()
  {
    return Akari.Animation.Spline( [ this ] );
  };

  return function( points )
  {
    // extract cp array for subdivision, evaluation and stuff
    var cp = [];
    var compo = [];

    for ( var d = points[ 0 ].length - 1; d >= 0; d -- )
    {
      cp[ d ] = [];
      for ( var i = points.length - 1; i >= 0; i -- )
      {
        cp[ d ].unshift( points[ i ][ d ] );
      }

      compo[ d ] = Akari.Animation.BezierComponent( cp[ d ] );
    }

    return
    {
      // Bezier
      points : points,
      cp : cp,
      components : compo,
      
      // Curve common
      dimension : points[ 0 ].length,
      evaluateAt : evaluateAt,
      evaluateAtLength : evaluateAtLength,
      getLength : getLength,
      toPolyline : toPolyline,
      toSpline : toSpline
    };
  };
}();
 
/* Class: CurveTrace
 * Traces through a Curve.
 *
 * curve
 *   The Curve to use.
 * animation
 *   A Function( time ) that maps time to coefficient or length on the curve.
 * mode
 *   [default] "lengthProportion"
 *   "coefficient", "length" or "lengthProportion", how the value returned from the function is interpreted.
 */
Akari.Animation.CurveTrace = function( params )
{
  var mode = params.mode || "lengthProportion";

  if ( mode === "lengthProportion" )
  {
    return function( time )
    {
      return params.curve.evaluateAtLength( params.animation( time ) * params.curve.getLength() );
    };
  }
  else if ( mode === "length" )
  {
    return function( time )
    {
      return params.curve.evaluateAtLength( params.animation( time ) );
    };
  }
  else
  {
    return function( time )
    {
      return params.curve.evaluateAt( params.animation( time ) );
    };
  }
};

////#ENDIF
 
/* Static Class: Interpolation
 * Provides functions for interpolating between numbers.
 *
 * Common parameters for functions in this class:
 *
 * t
 *   A Number, time factor indicating position between the values.
 * value1
 *   A Number, the first value ( t = 0 ).
 * value2
 *   A Number, the second value ( t = 1 ).
 */
Akari.Animation.Interpolation =
{
  /* Function: dimension
   * Creates a multidimensional interpolation based on given function.
   *
   * interpolation
   *   The interpolation function to wrap.
   */
  dimension : function( interpolation )
  {
    return function( t, value1, value2 )
    {
      var result = [];
      
      for ( var i = 0; i < value1.length; i ++ )
      {
        result[ i ] = interpolation( t, value1[ i ], value2[ i ] );
      }
      
      return result;
    };
  },
  
  /* Function: hold
   * Holds value1
   */
  hold : function( t, value1, value2 )
  {
    return value1;
  },

  /* Function: linear
   * Interpolates in linear manner.
   */
  linear : function( t, value1, value2 )
  {
    return value1 + ( value2 - value1 ) * t;
  },

  /* Function: bezier
   * [expensive] Creates a bezier interpolation.
   * The resulting interpolation transforms the input t with the given control points, and treats the resulting t as a linear time factor.
   *
   * cpS, cpD
   *   Array of numbers. Coordinates on the source-t / destination-t axis.
   */
  bezier : function( cpS, cpD )
  {
    if ( cpS.length != cpD.length || cpS.length < 1 )
    {
      return Akari.Animation.Interpolation.linear;
    }

    // Only 0 < cpS < 1 are valid as a function of time
    for ( var i = cpS.length - 1; i >= 0; i -- ) {
      if ( cpS[ i ] < 0 || cpS[ i ] > 1 )
      {
        return Akari.Animation.Interpolation.linear;
      }
    }

    if ( cpS.length > 2 )
    {
      // higher order curves
      var calcBezier = function( t, cp )
      {
        var a = [];
        a[ 0 ] = cp;

        for ( var jr = 1; jr < cp.length; jr ++ )
        {
          a[ jr ] = [];
          for ( var ir = 0; ir < cp.length - jr; ir ++ )
          {
            a[ jr ][ ir ] = ( 1 - t ) * a[ jr - 1 ][ ir ] + t * a[ jr - 1 ][ ir + 1 ];
          }
        }

        return a[ cp.length - 1 ][ 0 ];
      };

      var calcSlope = function( t, cp )
      {
        var n = cp.length - 1;
        var invT = 1 - t;

        // A = ( 1 - t ) ^ ( n - i - 1 )
        // B = t ^ ( i - 1 )
        // C = ( n choose i )
        // d/dt = P[ i ] * A * B * C * ( i - n * t )
        var a = Math.pow( invT, n - 1 );
        var b = 1 / t;
        var c = 1;

        var sum = cp[ 0 ] * a * b * c * ( - n * t );

        for ( var i = 1; i <= n; i ++ )
        {
          // Update ABC values
          a = a / invT;
          b = b * t;
          c = c * ( n - i + 1 ) / i;

          sum += cp[ i ] * a * b * c * ( i - n * t );
        }

        return sum;
      };

      var newtonIterations = 2;
      var binaryIterations = 7;
      var sampleSize = 17;
    }
    else if ( cpS.length == 2 )
    {
      var calcBezier = function( t, cp )
      {
        var c1 = cp[ 1 ];
        var c2 = cp[ 2 ];
        return ( ( ( 1 - 3 * c2 + 3 * c1 ) * t + 3 * c2 - 6 * c1 ) * t + 3 * c1) * t;
      };

      var calcSlope = function( t, cp )
      {
        var c1 = cp[ 1 ];
        var c2 = cp[ 2 ];
        return 3 * c1 + t * ( 6 * c2 - 12 * c1 + t * ( 3 - 9 * ( c2 - c1 ) ) );
      };

      var newtonIterations = 2;
      var binaryIterations = 5;
      var sampleSize = 11;
    }
    else
    {
      var calcBezier = function( t, cp )
      {
        var c1 = cp[ 1 ];
        return ( ( t - 3 * c1 ) * t + 3 * c1) * t;
      };

      var calcSlope = function( t, cp )
      {
        var c1 = cp[ 1 ];
        return 3 * c1 + t * ( 3 * t - 6 * c1 );
      };

      var newtonIterations = 1;
      var binaryIterations = 3;
      var sampleSize = 3;
    }

    // Samples for initial guess
    var sampleS = [];
    var sampleStep = 1 / ( sampleSize - 1 );
    var allPointS = Akari.Utilities.Factory.collapse( [ 0, cpS, 1 ] );
    var allPointD = Akari.Utilities.Factory.collapse( [ 0, cpD, 1 ] );
    for ( var i = 0; i < sampleSize; i ++ )
    {
      sampleS[ i ] = calcBezier( i * sampleStep, allPointS );
    }

    var getInitialGuess = function( tS )
    {
      for ( var i = sampleS.length - 1; i >= 0; i -- )
      {
        // sampleS[ i ] just won't work. Don't know why, the player is so quirky
        var s = i;
        var s2 = i - 1;
        if ( i === 0 || sampleS[ s2 ] <= tS )
        {
          return [ i - 1, ( i - 1 + ( tS - sampleS[ s2 ] ) / ( sampleS[ s ] - sampleS[ s2 ] ) ) * sampleStep ];
        }
      }
      return [ 0, 0 ];
    };

    // Algorithm from Firefox's implementation of cubic-bezier
    var newton = function( tS, guessTI )
    {
      for ( var i = 0; i < newtonIterations; i ++ )
      {
        var currentX = calcBezier( guessTI, allPointS ) - tS;
        var currentSlope = calcSlope( guessTI, allPointS );

        if ( Math.abs( currentSlope ) <= 0.00001 )
        {
          return guessTI;
        }

        guessTI -= currentX / currentSlope;
      }

      return guessTI;
    };

    var binary = function( tS, start, end )
    {
      var currentX;
      var currentT;
      var i = 0;

      do
      {
        currentT = start + ( end - start ) / 2;
        currentX = calcBezier( currentT, allPointS ) - tS;

        if ( currentX > 0 )
        {
          end = currentT;
        }
        else
        {
          start = currentT;
        }
      } while ( Math.abs( currentX ) > 0.001 && ( ++ i ) < binaryIterations );

      return currentT;
    };

    if ( calcSlope )
    {
      var getTI = function( t )
      {
        var ig = getInitialGuess( t );
        var startPos = ig[ 0 ] * sampleStep;
        var guessTI = ig[ 1 ];

        var initialSlope = calcSlope( guessTI, allPointS );

        if ( initialSlope > 0.02 )
        {
          return newton( t, guessTI );
        }
        else if ( initialSlope == 0.0 )
        {
          return guessTI;
        }
        else 
        {
          return binary( t, startPos, startPos + sampleStep );
        }
      };
    }
    else
    {
      var getTI = function( t )
      {
        var ig = getInitialGuess( t );
        var startPos = ig[ 0 ] * sampleStep;

        return binary( t, startPos, startPos + sampleStep );
      };
    }

    return function( t, value1, value2 )
    {
      var tI = getTI( t );
      var tD = calcBezier( tI, allPointD );

      return value1 + ( value2 - value1 ) * tD;
    };
  },
  
  /* Function Group: cubic
   * Interpolates in cubic manner.
   */
  cubic :
  {
    easeIn : function( t, value1, value2 )
    {
      return value1 + ( value2 - value1 ) * t * t * t;
    },
    easeOut : function( t, value1, value2 )
    {
      return Akari.Animation.Interpolation.cubic.easeIn( 1 - t, value2, value1 );
    },
    easeInOut : function( t, value1, value2 )
    {
      var midPoint = ( value1 + value2 ) / 2;
      if ( t < 0.5 ) return Akari.Animation.Interpolation.cubic.easeIn( t * 2, value1, midPoint );
      return Akari.Animation.Interpolation.cubic.easeOut( t * 2 - 1, midPoint, value2 );
    },
    easeOutIn : function( t, value1, value2 )
    {
      var midPoint = ( value1 + value2 ) / 2;
      if ( t < 0.5 ) return Akari.Animation.Interpolation.cubic.easeOut( t * 2, value1, midPoint );
      return Akari.Animation.Interpolation.cubic.easeIn( t * 2 - 1, midPoint, value2 );
    }
  },
  
  /* Function Group: quartic
   * Interpolates in quartic manner.
   */
  quartic :
  {
    easeIn : function( t, value1, value2 )
    {
      return value1 + ( value2 - value1 ) * t * t * t * t;
    },
    easeOut : function( t, value1, value2 )
    {
      return Akari.Animation.Interpolation.quartic.easeIn( 1 - t, value2, value1 );
    },
    easeInOut : function( t, value1, value2 )
    {
      var midPoint = ( value1 + value2 ) / 2;
      if ( t < 0.5 ) return Akari.Animation.Interpolation.quartic.easeIn( t * 2, value1, midPoint );
      return Akari.Animation.Interpolation.quartic.easeOut( t * 2 - 1, midPoint, value2 );
    },
    easeOutIn : function( t, value1, value2 )
    {
      var midPoint = ( value1 + value2 ) / 2;
      if ( t < 0.5 ) return Akari.Animation.Interpolation.quartic.easeOut( t * 2, value1, midPoint );
      return Akari.Animation.Interpolation.quartic.easeIn( t * 2 - 1, midPoint, value2 );
    }
  },
  
  /* Function Group: quintic
   * Interpolates in quintic manner.
   */
  quintic :
  {
    easeIn : function( t, value1, value2 )
    {
      return value1 + ( value2 - value1 ) * t * t * t * t * t;
    },
    easeOut : function( t, value1, value2 )
    {
      return Akari.Animation.Interpolation.quintic.easeIn( 1 - t, value2, value1 );
    },
    easeInOut : function( t, value1, value2 )
    {
      var midPoint = ( value1 + value2 ) / 2;
      if ( t < 0.5 ) return Akari.Animation.Interpolation.quintic.easeIn( t * 2, value1, midPoint );
      return Akari.Animation.Interpolation.quintic.easeOut( t * 2 - 1, midPoint, value2 );
    },
    easeOutIn : function( t, value1, value2 )
    {
      var midPoint = ( value1 + value2 ) / 2;
      if ( t < 0.5 ) return Akari.Animation.Interpolation.quintic.easeOut( t * 2, value1, midPoint );
      return Akari.Animation.Interpolation.quintic.easeIn( t * 2 - 1, midPoint, value2 );
    }
  },
  
  /* Function Group: exponential
   * Interpolates in exponential manner.
   */
  exponential :
  {
    easeIn : function( t, value1, value2 )
    {
      return ( t === 0 ) ? value1 : value1 + ( value2 - value1 ) * Math.pow( 2, 10 * ( t - 1 ) );
    },
    easeOut : function( t, value1, value2 )
    {
      return Akari.Animation.Interpolation.exponential.easeIn( 1 - t, value2, value1 );
    },
    easeInOut : function( t, value1, value2 )
    {
      var midPoint = ( value1 + value2 ) / 2;
      if ( t < 0.5 ) return Akari.Animation.Interpolation.exponential.easeIn( t * 2, value1, midPoint );
      return Akari.Animation.Interpolation.exponential.easeOut( t * 2 - 1, midPoint, value2 );
    },
    easeOutIn : function( t, value1, value2 )
    {
      var midPoint = ( value1 + value2 ) / 2;
      if ( t < 0.5 ) return Akari.Animation.Interpolation.exponential.easeOut( t * 2, value1, midPoint );
      return Akari.Animation.Interpolation.exponential.easeIn( t * 2 - 1, midPoint, value2 );
    }
  },
  
  /* Function Group: back
   * Interpolates in a overflowing manner.
   *
   * s
   *   [default] 1.70158
   *   Back factor.
   */
  back :
  {
    s : 1.70158,
    easeIn : function( t, value1, value2 )
    {
      return ( value2 - value1 ) * t * t * (( Akari.Animation.Interpolation.back.s + 1 ) * t - Akari.Animation.Interpolation.back.s ) + value1;
    },
    easeOut : function( t, value1, value2 )
    {
      return Akari.Animation.Interpolation.back.easeIn( 1 - t, value2, value1 );
    },
    easeInOut : function( t, value1, value2 )
    {
      var midPoint = ( value1 + value2 ) / 2;
      if ( t < 0.5 ) return Akari.Animation.Interpolation.back.easeIn( t * 2, value1, midPoint );
      return Akari.Animation.Interpolation.back.easeOut( t * 2 - 1, midPoint, value2 );
    },
    easeOutIn : function( t, value1, value2 )
    {
      var midPoint = ( value1 + value2 ) / 2;
      if ( t < 0.5 ) return Akari.Animation.Interpolation.back.easeOut( t * 2, value1, midPoint );
      return Akari.Animation.Interpolation.back.easeIn( t * 2 - 1, midPoint, value2 );
    }
  }
};

/* Enum: KeyframeMode
 * Modes of keyframe behaviors.
 */
Akari.Animation.KeyframeMode =
{
  // affectNext: The keyframe's function will be used when time is between this keyframe and the next.
  affectNext : 0,
  
  // weightBlend: The keyframe's function and the next's will be used when time is between this keyframe and the next, according to weight settings and time factor.
  weightBlend : 1,
  
  // useNext: The next keyframe's function will be used when time is between this keyframe and the next.
  useNext : 2
};
 
/* Class: Keyframe
 * A class describing a keyframe.
 *
 * time
 *   Time (in milliseconds) the keyframe is at.
 * value
 *   Value of the keyframe.
 * interpolation
 *   [default] Interpolation.linear
 *   Function used to interpolate between this value and the next.
 * mode
 *   [default] KeyframeMode.affectNext
 *   Interpolation behavior of this keyframe.
 * weight
 *   [default] 1
 *   Weight when KeyframeMode.weightBlend is used.
 */
Akari.Animation.Keyframe = function( params )
{
  return
  {
    time : params.time,
    value : params.value,
    interpolation : params.interpolation || Akari.Animation.Interpolation.linear,
    mode : params.mode || Akari.Animation.KeyframeMode.affectNext,
    weight : params.weight || 1,
    
    /* Function: clone
     * Custom clone function.
     */
    clone : function()
    {
      return Keyframe( Akari.Utilities.Factory.clone( params ) );
    }
  };
};
 
/* Enum: KeyframesBindMode
 * Modes of keyframe bind behaviors.
 */
Akari.Animation.KeyframesBindMode =
{
  // hold: Hold the value of the nearest keyframe when out of range.
  hold : 0,
  
  // repeat: Repeat keyframes when out of range (last => second)
  repeat : 1,
  
  // pingPong: Ping Pong keyframes when out of range.
  pingPong : 2
};
 
/* Class: KeyframesBind
 * An animation Binding using keyframes.
 *
 * keyframes
 *   An Array containing keyframes to use, in time order.
 * mode
 *   [default] KeyframesBindMode.hold
 *   Behavior when out of range.
 */
Akari.Animation.KeyframesBind = function( params )
{
  var firstKeyframeTime = params.keyframes[ 0 ].time;
  var lastKeyframeTime = params.keyframes[ params.keyframes.length - 1 ].time;
  var duration = lastKeyframeTime - firstKeyframeTime;
  
  // Create function for out of range behavior
  var applyRangeBehavior = null;
  if ( params.mode === Akari.Animation.KeyframesBindMode.repeat )
  {
    applyRangeBehavior = function( time )
    {
      return firstKeyframeTime + ( time - firstKeyframeTime ) % ( duration );
    };
  }
  else if ( params.mode === Akari.Animation.KeyframesBindMode.pingPong )
  {
    applyRangeBehavior = function( time )
    {
      // Modulate by double the duration
      var ppTime = ( time - firstKeyframeTime ) % ( duration * 2 );
      
      if ( ppTime > duration )
      {
        return lastKeyframeTime - ppTime + duration;
      }
      else
      {
        return firstKeyframeTime + ppTime;
      }
    };
  }
  
  // Function for finding the current keyframe index
  var findCurrentIndex = function( time )
  {
    var currentIndex = 0;
    while( params.keyframes[ currentIndex + 1 ] && params.keyframes[ currentIndex + 1 ].time < time )
      currentIndex ++;
    
    return currentIndex;
  };
  
  // Return the binding function
  return function( time )
  {
    ////#IF (IST DEBUG)
    Akari.intoProcess( Akari.processID.KEYFR );
    ////#ENDIF
    var newTime = applyRangeBehavior ? applyRangeBehavior( time ) : time;
    
    var currentIndex = findCurrentIndex( newTime );
    var currentKey = params.keyframes[ currentIndex ];
    var nextKey = params.keyframes[ currentIndex + 1 ];
    
    // Whether there is a next keyframe to interpolate to
    if ( nextKey )
    {
      var tFactor = ( newTime - currentKey.time ) / ( nextKey.time - currentKey.time );
      
      if ( currentKey.mode === Akari.Animation.KeyframeMode.affectNext )
      {
        ////#IF (IST DEBUG)
        Akari.outOfProcess();
        ////#ENDIF
        return currentKey.interpolation( tFactor, currentKey.value, nextKey.value );
      }
      else if ( currentKey.mode === Akari.Animation.KeyframeMode.useNext )
      {
        ////#IF (IST DEBUG)
        Akari.outOfProcess();
        ////#ENDIF
        return nextKey.interpolation( tFactor, currentKey.value, nextKey.value );
      }
      else if ( currentKey.mode === Akari.Animation.KeyframeMode.weightBlend )
      {
        var value1 = currentKey.interpolation( tFactor, currentKey.value, nextKey.value );
        var value2 = nextKey.interpolation( tFactor, currentKey.value, nextKey.value );
        
        var weight1 = currentKey.weight * ( 1 - tFactor );
        var weight2 = nextKey.weight * tFactor;
        
        ////#IF (IST DEBUG)
        Akari.outOfProcess();
        ////#ENDIF
        return ( value1 * weight1 + value2 * weight2 ) / ( weight1 + weight2 );
      }
    }
    else
    {
      ////#IF (IST DEBUG)
      Akari.outOfProcess();
      ////#ENDIF
      // When there is not a next keyframe for some reason, just return the current value
      return currentKey.value;
    }
  };
};

////#IF (NF INCL_VECTOR)
////#IF (NF INCL_RAND)

/* Class: WiggleKeyframes
 * A set of keyframes that make a wiggle effect.
 *
 * origin
 *   Number or Array of Numbers to wiggle upon.
 * numSteps
 *   Number of keyframes to generate.
 * startTime
 *   Time (in milliseconds) at which the wiggle starts.
 * stepTime
 *   Time (in milliseconds) each step will last for.
 * amount
 *   Strength of the effect.
 * rng
 *   [default] Akari.Utilities.Randomizer
 *   RNG to use when generating random vector.
 * interpolation
 *   [default] Interpolation.cubic.easeInOut
 *   Function used to interpolate between values.
 * returnCenter
 *   [default] false
 *   Indicated whether to return to center before every move
 */
Akari.Animation.WiggleKeyframes = function( params )
{
  var rng = params.rng || Akari.Utilities.Randomizer;

  // Private function for randomizing with base
  var randomize = function( origin )
  {
    if ( origin.hasOwnProperty("length") )
    {
      var randVector = rng.vector( origin.length );
      
      // Scale vector to fit amount constraint
      var scaledVector = Akari.Utilities.Vector.scale( randVector, params.amount / Akari.Utilities.Vector.length( randVector ) );
      
      return Akari.Utilities.Vector.add( origin, scaledVector );
    }
    else
    {
      // Origin is not Array, return a simple randomization
      return origin + params.amount * ( rng.uniform() - 0.5 );
    }
  };
  
  if ( params.returnCenter )
  {
    var keyframes = [];
    for( var c = 0; c < params.numSteps; c ++ )
    {
      keyframes.push( Akari.Animation.Keyframe({ time : params.startTime + params.stepTime * c - 1, value : params.origin, interpolation : Akari.Animation.Interpolation.hold }) );
      keyframes.push( Akari.Animation.Keyframe({ time : params.startTime + params.stepTime * c, value : randomize( params.origin ), interpolation : params.interpolation || Akari.Animation.Interpolation.cubic.easeInOut }) );
    }
    
    // Repeat first for consistency
    keyframes.push( Akari.Animation.Keyframe({ time : params.startTime + params.stepTime * ( ++ c ) - 1, value : params.origin, interpolation : Akari.Animation.Interpolation.hold }) );
    
    return keyframes;
  }
  else
  {
    var keyframes = [];
    for( var c = 0; c < params.numSteps; c ++ )
    {
      keyframes.push( Akari.Animation.Keyframe({ time : params.startTime + params.stepTime * c, value : randomize( params.origin ), interpolation : params.interpolation || Akari.Animation.Interpolation.cubic.easeInOut }) );
    }
    
    // Repeat first for consistency
    keyframes.push( Akari.Animation.Keyframe({ time : params.startTime + params.stepTime * ( ++ c ), value : keyframes[ 0 ].value, interpolation : params.interpolation || Akari.Animation.Interpolation.cubic.easeInOut }) );
    
    return keyframes;
  }
};

////#ENDIF
////#ENDIF

////#ENDIF