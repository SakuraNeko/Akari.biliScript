/* Sample: StopFrameAnimation
 * Demonstrates usage of Akari.Display.Animation
 *
 * The sample generates a stop frame animation about, well, randomly placed line segments flying around on the screen.
 */

// Fetch a global reference for Akari
var Akari = Global._get( "__akari" );

// Import namespaces by extending this closure
Akari.Utilities.Factory.extend( this, Akari.Utilities );
Factory.extend( this, Akari.Display );
Factory.extend( this, Akari.Animation );

// Create a class for that crazy instruction we want
function CrazyFrame( stops, thickness, color )
{
  return function( graphics )
  {
    for( var i = 0; i < stops; i ++ )
    {
      graphics.lineStyle( thickness, color );
      graphics.curveTo( Math.random() * 1280, Math.random() * 720, Math.random() * 1280, Math.random() * 720 );
    }
  };
}

// Now we can create our MainComposition. It should be familiar now.
var mainComp = MainComposition(
{
  width : 1280,
  height : 720,
  layers :
  [
    // Again we use a DynamicSourceLayer, but with an Animation as provider now.
    DynamicSourceLayer(
    {
      provider : Animation(
      {
        // It's safe to use Factory.replicate here, too.
        frames : Factory.replicate( CrazyFrame, 60, function( i )
        {
          // Randomize thickness to make it not too dull
          return [ Math.round( Math.random() * 100 ) + 100, Math.ceil( Math.random() * 8.0 ), 0xFFFFFF ];
        }),
        
        frameRate : 4
      }),
      
      // While our animation is only 15 seconds long, duration is set to be 1 minute. We'll deal with the stretching later.
      inPoint : 0,
      outPoint : 60000,
      
      // By default, DynamicSourceLayer will stretch its provider's timeline to fit inPoint and outPoint,
      // but we can override it with a Binding on timeRemap. Here a repeating KeyframesBind is used to repeat the animation.
      timeRemap : KeyframesBind(
      {
        keyframes :
        [
          // We don't really want speed changes, so we just map time as it is.
          // However time changes, even exotic ones, are possible because you can put any Binding here, just like a ordinary property.
          Keyframe({ time : 0, value : 0 }),
          Keyframe({ time : 15000, value : 15000 })
        ],
        
        // Here again we make it reapat, so any time past 15s will be wrapped back.
        mode : KeyframesBindMode.repeat
      })
    })
  ]
});

// That's it! Time to see it in action.
Akari.execute( mainComp );